name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Build with password injection
        run: |
          # Create build directory
          mkdir -p _site
          
          # Copy all files except hidden directories and _site itself
          find . -maxdepth 1 -name ".*" -prune -o -name "_site" -prune -o -type f -exec cp {} _site/ \;
          
          # Copy directories (css, js, images, etc.) but exclude hidden ones
          for dir in */; do
            if [[ "$dir" != "_site/" ]] && [[ "$dir" != .* ]]; then
              cp -r "$dir" _site/
            fi
          done
          
      - name: Generate secure password hash
        run: |
          # Generate SHA-256 hash of the password (much more secure than plaintext)
          PASSWORD_HASH=$(echo -n "${{ secrets.WEDDING_PASSWORD }}" | sha256sum | cut -d' ' -f1)
          echo "Generated secure hash for password"
          
          # Replace the placeholder with the password hash in script.js
          sed -i "s/PRODUCTION_PASSWORD_HASH_PLACEHOLDER/$PASSWORD_HASH/g" _site/js/script.js
          
          # Verify the hash was injected (show partial hash for security)
          echo "Hash injection verification:"
          if grep -q "$PASSWORD_HASH" _site/js/script.js; then
            echo "‚úÖ Password hash successfully injected (first 8 chars: ${PASSWORD_HASH:0:8}...)"
          else
            echo "‚ùå Hash injection failed"
            exit 1
          fi
          
          # Ensure no plaintext passwords remain
          if grep -i "PLACEHOLDER\|ForeverTogether" _site/js/script.js; then
            echo "‚ùå Found placeholder text - security risk!"
            exit 1
          fi
          
          echo "üîê Security check passed - no plaintext passwords in deployed code"
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4